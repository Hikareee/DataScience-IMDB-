# -*- coding: utf-8 -*-
"""Copy of #1 Scraping from IMDB.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Qq0xtuh-zAQPpB--IasED9wsQojMOxeB

We can scrape the IMDb movie ratings and their details with the help of the **BeautifulSoup** library of Python. 

Read the documentation here: https://beautiful-soup-4.readthedocs.io/en/latest/

Below is the list of modules required to scrape from IMDB.

* *requests:* Requests library is an integral part of Python for making HTTP requests to a specified URL. Whether it be REST APIs or Web Scrapping, requests is must to be learned for proceeding further with these technologies. When one makes a request to a URI, it returns a response.

* *html5lib:* A pure-python library for parsing HTML. It is designed to conform to the WHATWG HTML specification, as is implemented by all major web browsers.

* *bs4:* BeautifulSoup object is provided by Beautiful Soup which is a web scraping framework for Python. Web scraping is the process of extracting data from the website using automated tools to make the process faster.

**STEP 1. Import the library**
"""

from bs4 import BeautifulSoup
import requests
import re
import pandas as pd

"""**STEP 2. Access the HTML content from the webpage by assigning the URL and creating a soup object.**"""

# Downloading imdb top 250 movie's data
# The IMDB website check the GET request for an Accept-Language parameter. If the request doesn't have one, it shows the Chinese version.
headers = {'Accept-Language': 'en-US,en;q=0.8'}
url = 'https://www.imdb.com/title/tt9335498/episodes?season=1'
response = requests.get(url,headers=headers)
soup = BeautifulSoup(response.text, "html")

"""**STEP 3. Extract the movie ratings and their details. Here, we are extracting data from BeautifulSoup object using Html tags like href, title, etc.** In this step you need basic html skill. Try to understand the structure before you loop through all the data.

* select the tag \<```td```\> with the class ```titleColumn```. Please notice the text scraped is still in html format.
"""

# movies = soup.select('div.list.detail.eplist')
# print(movies[0])

# """* get the text in-between paired html tags."""

# title = [t.get_text() for t in soup.select('div.info strong')]
# for i in range(len(title)):
#   print(title[i])

# """* To get the link, notice that the text is inside the ```<a>``` tag within the ```<td>``` tag. We can separate it with a space. """

# links = soup.select('div.info a')
# print(links[0])

# """

# *   Get the attribute inside the tag. 

# """

# #links = [a.attrs.get('href') for a in soup.select('td.titleColumn a')]

# links=[]
# for a in soup.select('div.info a'):
#   links.append(a.attrs.get('href'))

# print(links[0])

# """

# *   Cleaning the result with regex

# """

# ratings = soup.select('span.ipl-rating-star__rating')
# print(ratings[0].get_text())
# vote = [t.get_text() for t in soup.select('span.ipl-rating-star__total-votes')]
# print(vote[0])

# """**STEP 4. Looping the process and storing the data.**
# You need some regex search here. 
# """

list = []
 
# Iterating over movies to extract
# each movie's details
for i in range(len(soup.select('div.info'))):

    rank=soup.select('div.info')[i].get_text()
    # clean the rank data, we just want the first digit before ".", and remove all white space
    rank=rank[0:rank.find('.')].strip()

    movie_title=soup.select('div.info strong')[i].string
    year=soup.select('div.info span')[i].string
    

    crew=soup.select('div.info a')[i].attrs.get('title')

    rating= soup.select('span.ipl-rating-star__rating')[i].get_text()
    vote=soup.select('span.ipl-rating-star__total-votes')[i].get_text()
    

    link=soup.select('div.info a')[i].attrs.get('href')
    #add the domain name
    link="https://www.imdb.com" + link

    data = {"airdate":rank,
            "movie_title": movie_title,
            "rating": rating,
            "link": link,
            "votes": vote}
    list.append(data)

"""**STEP 5. Save as DataFrame and store it as CSV for further analysis.** You can also store it as SQL if you prefer. """

df = pd.DataFrame(list, columns = [ 'movie_title', 'airdate', 'rating', 'link', 'votes'])
print(list[0])
print (df.head())

df.to_csv('250movie.csv', index=False)

